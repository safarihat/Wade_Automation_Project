

import json
import logging
from typing import List, Dict, Any

from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import JsonOutputParser, StrOutputParser

# Import the new retrieval service
from .retrieval_service import RetrievalService

logger = logging.getLogger(__name__)

class VulnerabilityService:
    """
    A service to orchestrate the generation of a vulnerability analysis report
    by decomposing the task into a chain of focused LLM calls.
    """

    def __init__(self, llm, retriever, site_context: Dict[str, Any]):
        """
        Initializes the service with the LLM, a retriever, and site context.
        """
        self.llm = llm
        self.retriever = retriever  # The base retriever
        self.raw_site_context = site_context
        self.site_context = self._preprocess_site_context(site_context)
        self.council = self.site_context.get("council_authority_name", "the relevant region")
        self.catchment = self.site_context.get("catchment_name", "the relevant catchment")
        self.retrieved_docs_content: str = ""

    def _preprocess_site_context(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Analyzes the raw geospatial data to create simple, reliable boolean flags
        for the LLM to use. This acts as a code-based validation step.
        """
        logger.info("Preprocessing site context to add validation flags.")
        processed_context = context.copy()

        protected_areas_data = context.get('protected_areas', {})
        has_intersection = bool(protected_areas_data and protected_areas_data.get('features'))
        processed_context['validation_flags'] = {
            'intersects_protected_area': has_intersection
        }

        has_high_erosion_risk = False
        erosion_data = context.get('erosion', {})
        if erosion_data and erosion_data.get('features'):
            for feature in erosion_data['features']:
                properties = feature.get('properties', {})
                severity = properties.get('ERSN_SEV', '').lower()
                if severity in ['very severe', 'severe', 'high']:
                    has_high_erosion_risk = True
                    break
        
        processed_context['validation_flags']['has_high_erosion_risk'] = has_high_erosion_risk

        logger.info(f"Generated validation flags: {processed_context['validation_flags']}")
        return processed_context

    def _perform_advanced_retrieval(self):
        """
        Uses the RetrievalService to generate queries and fetch documents.
        """
        logger.info("Performing advanced retrieval step...")
        retrieval_service = RetrievalService(retriever=self.retriever, llm=self.llm)
        
        queries = retrieval_service.generate_query_variations(self.raw_site_context)
        documents = retrieval_service.multi_query_retrieve(queries)
        self.retrieved_docs_content = "\n\n---\n\n".join([doc.page_content for doc in documents])

    def summarize_catchment_context(self) -> str:
        logger.info("Running Step 1: Summarize Catchment Context")
        if not self.retrieved_docs_content:
            return "No regulatory context could be retrieved for this catchment."

        template = """
        You are an environmental consultant for the {council}.
        Based on the following excerpts from regional policy documents, provide a concise summary of the key environmental values, challenges, and regulatory focus for the {catchment} catchment.
        Your summary should focus primarily on what the Southland Water and Land Plan and related policies say about this specific area.

        Retrieved Documents:
        {context}

        Concise Summary:
        """
        prompt = PromptTemplate.from_template(template)
        chain = prompt | self.llm | StrOutputParser()
        return chain.invoke({
            "context": self.retrieved_docs_content,
            "council": self.council,
            "catchment": self.catchment,
        })

    def identify_risks_from_data(self) -> str:
        logger.info("Running Step 2: Identify Risks from Site Data")
        template = """
        You are an environmental data analyst. Based on the following site-specific geospatial data (which includes pre-calculated validation_flags), identify and list the top 3-5 potential environmental risks for this property.
        For each risk, briefly state the data point that indicates the risk (e.g., \"Risk of soil erosion due to steep slope angle of 18 degrees.\").
        Do not mention policy or regulations yet.

        Site-Specific Data:
        {site_data}

        List of Potential Risks:
        """
        prompt = PromptTemplate.from_template(template)
        chain = prompt | self.llm | StrOutputParser()
        return chain.invoke({"site_data": json.dumps(self.site_context, indent=2)})

    def generate_structured_analysis(self, catchment_summary: str, identified_risks: str) -> Dict[str, Any]:
        logger.info("Running Step 3: Generate Structured Analysis with Validation Flags")
        output_parser = JsonOutputParser()
        template = """
        You are an expert environmental consultant creating a formal vulnerability assessment. Your primary focus is compliance with the Southland Water and Land Plan.
        Combine the following information into a single, structured JSON object.

        1. Summary of Catchment Context (from regional policies):
        {catchment_summary}

        2. Site-Specific Data (This now includes a 'validation_flags' object):
        {site_data}

        3. Key Risks Identified from Site Data:
        {identified_risks}

        4. Full Regulatory Context (for cross-referencing):
        {regulatory_context}

        ---
        **CRITICAL INSTRUCTIONS FOR ACCURACY:**
        You MUST use the boolean flags inside the `validation_flags` object in the `Site-Specific Data` to make definitive statements.
        - If `intersects_protected_area` is `false`, you MUST state that the property does not intersect a protected area. Do not imply that it does.
        - If `has_high_erosion_risk` is `true`, you MUST state that there is a high risk of erosion.

        TASK: Generate a JSON object with the exact following format. Ensure your analysis explicitly connects the site data and risks to the requirements of the Southland Water and Land Plan mentioned in the regulatory context.

        {format_instructions}
        """
        prompt = PromptTemplate.from_template(
            template,
            partial_variables={"format_instructions": output_parser.get_format_instructions()}
        )
        chain = prompt | self.llm | output_parser
        return chain.invoke({
            "catchment_summary": catchment_summary,
            "site_data": json.dumps(self.site_context, indent=2),
            "identified_risks": identified_risks,
            "regulatory_context": self.retrieved_docs_content,
        })

    def run_full_analysis(self) -> Dict[str, Any]:
        """
        Orchestrates the full, multi-step analysis pipeline.
        """
        logger.info("Starting full vulnerability analysis pipeline...")
        self._perform_advanced_retrieval()
        catchment_context = self.summarize_catchment_context()
        identified_risks = self.identify_risks_from_data()
        structured_report = self.generate_structured_analysis(catchment_context, identified_risks)
        logger.info("Full vulnerability analysis pipeline complete.")
        return structured_report

