from django.contrib.gis.db import models
from django.contrib.auth.models import User

class RegionalCouncil(models.Model):
    """
    Represents the geographic boundaries of a New Zealand Regional Council,
    loaded from a shapefile.
    """
    name = models.CharField(max_length=100, help_text="Name of the regional council.")
    geom = models.MultiPolygonField(srid=4326)

    def __str__(self):
        return self.name

class FreshwaterPlan(models.Model):
    """
    Represents a Freshwater Plan generated by the document generator.
    """
    class PaymentStatus(models.TextChoices):
        PENDING = 'pending', 'Pending'
        PAID = 'paid', 'Paid'

    class GenerationStatus(models.TextChoices):
        PROCESSING = 'processing', 'Processing'
        READY = 'ready', 'Ready'
        FAILED = 'failed', 'Failed'

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='freshwater_plans')
    latitude = models.FloatField()
    longitude = models.FloatField()
    location = models.PointField(srid=4326, help_text="Geographic coordinates (Point) of the plan's location.")

    # Optional, populated artifacts
    map_image = models.ImageField(upload_to='map_images/', blank=True, null=True, help_text="Generated map image for the plan.") # Optional, populated artifacts

    # Basic plan metadata/content
    council = models.CharField(max_length=255, blank=True, null=True, help_text="The council associated with the plan.")
    council_authority_name = models.CharField(max_length=255, blank=True, null=True, help_text="The official council name as identified by the RAG model.")
    generated_plan = models.TextField(blank=True, null=True, help_text="The generated content of the freshwater plan.")

    # --- Fields for Step 2: Administrative Details ---
    # These are all optional at the database level to allow for progressive population.
    operator_name = models.CharField(max_length=255, blank=True, null=True, help_text="Name of the farm operator.")
    operator_contact_details = models.TextField(blank=True, null=True, help_text="Contact details for the operator.")
    operator_nzbn = models.CharField(max_length=50, blank=True, null=True, help_text="New Zealand Business Number (if applicable).")

    owner_name = models.CharField(max_length=255, blank=True, null=True, help_text="Name of the land owner, if different.")
    owner_contact_details = models.TextField(blank=True, null=True, help_text="Contact details for the owner.")

    plan_preparer_name = models.CharField(max_length=255, blank=True, null=True, help_text="Name of the person who prepared the plan.")

    farm_address = models.TextField(blank=True, null=True, help_text="Physical address of the farm.")
    legal_land_titles = models.TextField(blank=True, null=True, help_text="Legal land titles and parcels.")

    total_farm_area_ha = models.FloatField(blank=True, null=True, help_text="Total farm area in hectares.")
    leased_area_ha = models.FloatField(blank=True, null=True, help_text="Leased or licensed area in hectares.")

    resource_consents = models.TextField(blank=True, null=True, help_text="Current relevant resource consents.")

    # --- Fields for Catchment/Degradation Data (from ArcGIS) ---
    catchment_area_info = models.JSONField(blank=True, null=True, help_text="Aggregated catchment data from ArcGIS.")
    catchment_name = models.CharField(max_length=255, blank=True, null=True, help_text="The name of the REC catchment the property is located in.")
    
    # --- Fields for high-resolution regional data ---
    soil_type = models.CharField(max_length=255, blank=True, null=True, help_text="Dominant soil type from regional data (e.g., Topoclimate).")
    slope_class = models.CharField(max_length=255, blank=True, null=True, help_text="Dominant slope class from regional data (e.g., LiDAR).")
    
    # --- New fields for detailed ArcGIS data ---
    arcgis_slope_angle = models.FloatField(blank=True, null=True, help_text="Slope angle in degrees from ArcGIS data.")
    nutrient_leaching_vulnerability = models.CharField(max_length=100, blank=True, null=True, help_text="Nutrient leaching vulnerability from ArcGIS data.")
    erodibility = models.CharField(max_length=100, blank=True, null=True, help_text="Erodibility classification from ArcGIS data.")
    soil_drainage_class = models.CharField(max_length=100, blank=True, null=True, help_text="Soil drainage classification from FSL data.")

    # PDF outputs
    pdf_preview = models.FileField(upload_to='previews/', blank=True, null=True, help_text="A PDF preview of the generated plan.")
    pdf_final = models.FileField(upload_to='finals/', blank=True, null=True, help_text="The final PDF of the generated plan.")

    # Workflow/status + map-drawn feature storage used by views
    generation_status = models.CharField(
        max_length=20,
        choices=GenerationStatus.choices,
        default=GenerationStatus.PROCESSING,
        help_text="Status of admin details pre-population/generation pipeline."
    )
    generation_progress = models.JSONField(default=list, blank=True, help_text="A log of steps taken during the generation process.")
    vulnerability_analysis_data = models.JSONField(blank=True, null=True, help_text="The full JSON output from the VulnerabilityService analysis.")
    vulnerability_features = models.JSONField(blank=True, null=True, help_text="User-drawn vulnerability features (GeoJSON).")
    activity_features = models.JSONField(blank=True, null=True, help_text="User-drawn activity features (GeoJSON).")
    physical_works_features = models.JSONField(null=True, blank=True, help_text="GeoJSON features for physical works.")
    risk_management_data = models.JSONField(null=True, blank=True, help_text="Data for the risk management table.")
    map_snapshot = models.ImageField(upload_to='plan_snapshots/', blank=True, null=True, help_text="Snapshot of the map for the activities step.")

    payment_status = models.CharField(
        max_length=20,
        choices=PaymentStatus.choices,
        default=PaymentStatus.PENDING,
        help_text="The payment status of the plan."
    )

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Freshwater Plan for {self.council} by {self.user.username}"

class MonitoringSite(models.Model):
    """
    Represents a water quality monitoring site from Environment Southland's Hilltop API.
    """
    site_name = models.CharField(max_length=255, help_text="The name of the monitoring site.")
    hilltop_site_id = models.CharField(max_length=255, unique=True, help_text="The unique identifier for the site in the Hilltop API.")
    location = models.PointField(srid=4326, help_text="Geographic coordinates (Point) of the monitoring site.")

    def __str__(self):
        return self.site_name